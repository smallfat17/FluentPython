	contextlib
		closing
			如果对象实现了close()方法，但是没有实现__enter__/__exit__协议，那么可以使用这个函数构建上下文管理器
		
		suppress
			构建临时忽略指定的上下文管理器
		
		@contextmanager
			将简单的生成器变成上下文管理器
		
		ContextDecorator
			基类 ，用于定义基于类的上下文管理器
		
		ExitStack
			后进先出调用__exit__方法
		
	@contextmanager
	def	func():
		__enter__
		yield
		__exit__
		
		该装饰器把函数包装成实现了__enter__和__exit__的_GeneratorContextManager类
			 def __init__(self, func, args, kwds):
				self.gen = func(*args, **kwds) #调用函数获得一个生成器对象并赋值给gen属性
				pass
			def __enter__(self):
				try:
					return next(self.gen) #__enter__方法调用next(gen)函数执行到func中的yield语句处，并返回yield的值给with .. as语句
				except StopIteration:
					pass(raise error)
			def __exit__(self, type, value, traceback):
				if type is None:
					try:
						next(self.gen) #__exit__方法调用next(gen)执行func中yield语句以下的部分，捕获StopIteration并结束函数，如果type为None还有异常处理
					except StopIteration:
						return 
				else:
					pass
		如果在with语句出现异常，异常会在func的yield处抛出并且终止with语句，所以在yield语句应该进行try
		
第 16 章 协程
	用作协程的生成器的基本行为
		新创建的协程需要预激活(Prime)，让协程执行到yield表达式处
		from inspect import getgeneratorstate 
		getgeneratorstate(coroutine) 能查看协程状态，创建，运行，挂起，关闭四种状态
	
	终止协程和异常处理
		generator.throw(exc_type,exc_value,traceback)
			向generator发送异常，使得generator在yield处抛出异常，如果处理了将会执行到下一个yield处
			
		generator.close()
			向generator的yield处抛出GeneratorExit异常，生成器如果不处理，则自动抛出StopIteration异常并且调用方不会报错，但是一定不能再产出值
		
	使用yield from	
		委托生成器
			包含yield from语句的函数
		
		子生成器
			从yield from表达式获取的生成器
			
		调用方
			调用委托生成器的客户端代码，也即是客户端
	
	yield from意义
		
		
		