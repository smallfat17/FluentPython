第 18 章 使用 asyncio 包处理并发
	并发：一次处理多件事，单核内
	并行：一次做多件事情，多核
	
	asyncio包	
		使用事件循环驱动协程实现并发
	
	\x08 退格符
	In [49]: write('smallfat');flush();write('\x08' * 5);write('xixi')
	smallfat
	sma[llfat]->sma[(xixi)t]
	smaxixit
	
	threading.Thread.join()，等待该函数运行完成
	
	asyncio.Task对象
		与Thread对象等效，Task对象用作协作式多任务的库
		Task对象用于驱动协程，Thread用于调用可调用对象
		Task对象不由自己动手实例化，而是使用asyncio.ensure_future()对象或loop.create_task()获取
		Task对象再创建的时候就已经排定好运行时间，Thread对象则要手动start
		没有API能从外部终止线程，Task.cancel()方法能终止协程，并且再yield(await)处能捕获异常进行处理
		协程由loop.run_until_complete()方法执行
		
		再asyncio中，如果task没有运行完，调用.result()方法不会阻塞等待结果，而是会抛出asyncio.InvalidStateError
		基本流程
			再单个线程中使用主循环依次激活队列里的协程。各个协程先前执行几步然后把控制器权让给主循环，主循环再激活队列里的下一个协程
		
		asyncio.wait(iter)，传入由future或者协程组成的可迭代对象，wait会将其打包成Task对象
		
		asyncio包的事件循环会自己帮我们完成yield from语句中的next(..)函数或send(...)函数
		我们再asyncio中写yield from(await)的作用是将协程委托给asyncio包中的协程方法，如aiohttp.request(),aiohttp.sleep()
		最最内存的子生成器其实是I/O操作的函数，由系统完成而非我们自己去写
		
			