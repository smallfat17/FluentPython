	定义一个特性工厂函数
		weight = quantity('weight')
		price = quantity('price')
		
	处理属性的重要属性和函数
		__class__
			对象所属类的引用，type(obj)，__getattr__只在类中寻找而不再实例中寻找
		
		__dict__
			存储对象或类的可写属性
		
		__slots__
			限制实例有哪些属性，如果手动添加__dict__，可以设置属性
			
		dir()
			列出对象的大多数属性
		
		getattr(obj, name[, default]])
			从对象或者类或者超类中获取name属性，如果没有并且设置了default则返回default
		
		hasattr(obj, name)
			调用getattr()看是否发生异常
		
		setattr(obj, name, value)	
			为属性赋值，如果没有该属性则新建
			
		vars([obj])
			返回__dict__属性
		
		直接通过__dict__属性读写属性不会触发特殊方法，所以在__dict__对象中定义特殊方法不会被隐式得调用
			__delattr__
				只要是del语句，就会调用
			__dir__	
				dir()函数时候调用
			__getattr__
				只在类或超类中寻找不到属性时调用
			__getattribute__
				尝试获取属性就会调用，特殊属性和特殊方法除外，调用这个方法抛出AttributeError才会调用__getattr__
			__setattr__
				设置属性得时候就会调用
			特性或者描述符相对于定义这些特殊方法更加不容易出错
			
第 20 章 属性描述符
	实现__set__和__get__方法得类
	实现了__set__即为覆盖型描述符，实现了__set__但是没有实现__get__，同名的我实例属性会覆盖属性描述符
	没有实现__set__得描述符会被实例属性覆盖
	覆盖下描述符(实现了__set__)称之为数据描述符，反之为非数据描述符
	依附在类上的函数会被绑定为方法
	
第 21 章 类元编程
	type是一个类
		type(cls_name, (extends_list), attrs)可以创建一个类
	
	运行时和导入时
		导入时：导入模块，执行类的定义体，包括嵌套的类，遇到装饰器先运行装饰器，不会运行maini模块
		运行时，前面与导入时一样，会运行main模块，程序结束垃圾回收__del__运行方法
		
	type	
		理清实例和类的区别
		所有的类都直接或者间接的是type的实例，包括object也是type的实例
		所有的类都直接或者间接继承自object，包括type也继承自object
	
	元类：构建类的类
		元类是type类的子类兼实例，具有构造类的功能，元类的实例即是类！
			子类以为着具有创建类的功能，是实例是因为所有的类都间接或者直接是type的实例
			
		
		