第 12 章 继承的优缺点	
	子类化内置类型很麻烦
		内置类型不会调用用户定义的类覆盖得特殊方法，如dict得子类的get和update方法不会调用子类覆盖的__setitem__方法
		内置类型的方法会忽略用户覆盖的方法，所以不要子类化内置类型，而应该去继承collections模块中的类
		C语言编写的内置类型才会有影响，使用Python写的类型可以子类化，所以应当继承UserDict而不是dict
		少数例外，如__missing__
		
	多重继承和方法解析顺序
		方法解析顺序(Method Resolution Order)MRO，遍历继承的顺序图
		python采用C3算法遍历继承关系，可以用mro()方法查看
		C3
			class B(A1, A2, A3, ...)
			mro(B) = [B] + merge(mro[A1], mro[A2], mro[A3], ...)
			merge中，对于merge([A, O],[B, O], [A, B)
						=[A] + merge([O], [B, O], [B])
						=[A] + [B] + merge([O], [O])
						=[A] + [B] + [O]
					如果序列的第一个元素在其他序列也是第一个元素或者不曾出现再其他序列，那么将它取出
	
	多重继承的真实应用
		GUI工具包Tkinter
	
	处理多重继承
		把接口继承和实现继承区分开
			继承接口：创建子类实现“是什么”关系
			继承实现，避免代码重复
		
		使用抽象基类显示继承接口
			如果类的左右是定义接口，应该明确定义为抽象基类(如Java中的interface)
			
		通过混入重用代码
			mixin class	
			为多个不相关的子类提供方法实现，但是不体现“是什么”关系，mixin模式不定义新类型，只打包方法，便于重用。mixin类绝对不能实例化，而且具体类不能只继承mixin类
		在名称中明确指明混入(mixin)
			Python没有正规的声明mixin规范，只能通过命名识别...Mixin后缀
		抽象基类可以作为混入，反过来则不成立
			抽象基类可以实现具体方法，可以作为混入使用
		具体可以没有或者最多只有一个具体超类
			具体类中除了抽象基类和mixin之外，最多有一个具体超类
			Animal(抽象基类) Woof(mixin) Dog(具体超类) Tidy(具体类)
		为用户提供聚合类
			讲抽象基类和混入组合，提供一个类
		优先使用对象组合，而不是类继承
		
	Django通用视图中的混入
		django.views.generic.base有大量Mixin类，提供给不同的View做通用视图类，尽量使用这些视图类，能避免大量样板代码，还能增进团队合作
		
	super()函数返回一个super类
		super类包含两个信息，一个MRO列表以及MRO中的一个类
		super() --><super: <class 'MoveableAdapter'>, <MovableColoredShape object>>
		MRO列表是当前类MoveableAdapter的MRO，即MoveableAdapter.__mro__	---><class '__main__.MoveableAdapter'>, <class '__main__.Root'>, <class 'object'>
		super()函数返回MRO列表中当前类的下一个类即<class '__main__.Root'>
		关于super的文章	https://mozillazg.com/2016/12/python-super-is-not-as-simple-as-you-thought.html
		
	