第六章	使用一等函数实现设计模式
	"策略"模式
		购物车折扣，每一种折扣都是一个方法，选择best_promo
		globals
			返回一个字典，表示当前的全局符号表。
		inspect
			inspect.getmembers(module, inspect.isfunction)获取指定模块的成员函数
	"命令"模式	
		解耦操作调用的对象和提供实现的对象
		菜单命令

第七章	装饰器和闭包
	装饰器
		特性1.能把被装饰的函数替换成其他函数
		特性2.装饰器再加载模块时立即执行，被装饰的函数明确调用时才执行
	
	变量作用域
		gloal声明全局变量，如果在函数内使用了外部的变量，需要将其设置为全局变量，否则在声明同局部变量后外部变量将会被当作局部变量使用
		b = 1
		def f1(a):
			print(a)
			print(b) #报错，因为函数内声明了b变量为局部变量，此处的局部变量并没有初始化
			b = 6 
	
	闭包
		闭包时一种函数，它会保留定义函数时存在的自由变量(freevars)的绑定，这样调用函数时，虽然定义作用于域不可用了(函数返回了)，但是仍然能使用那些绑定(自由变量)
		只有嵌套函数才可能需要闭包
		但是在嵌套函数内声明变量会使其成为局部变量，例如
		def f1():
			count = 0
			def f2():
				count += 1
				return count
			return f2
		
		在count += 1  --> count = count + 1 会隐式的创建了局部变量，所以会报错
		nonlocal
			讲变量声明为自由变量
		def f1():
			count = 0
			def f2():
				nonlocal count
				count += 1
				return count
			return f2
	
	装饰器原理
		装饰器会返回一个新的函数，并且是在模块加载的时候就进行的操作，使用@functools.wraps(func)装饰一个函数可以将func函数的属性赋值给被装饰的函数
		
		标准库中的装饰器
			functools.lru_cache
			
			