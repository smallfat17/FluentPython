第 13 章 正确重载运算符
	运算符重载基础
		考虑到重载运算符的滥用情况，Python限制了重载运算符的重载，做好了灵活性，可用性和安全性的平衡
			1.不能重载内置类型的运算符
			2.不能新建运算符，只能重载现有的
			3.某些运算符不能重载，is not or and，运算符| & ~可以
		一元运算符 - + 以及中缀运算符* 和 +
	
	一元运算符	
		-(__neg__)
			一元取负数运算符,if x = 2, -x = -2
		+(__add__)
			一元正算术运算符，通常，x == +x，decimal的精度改变会导致x != +x
			+Counter将会删除Counter中计数位0和负数的键值对
		~(__invert__)
			对整数按位取反，定义为~x = -(x+1)。x = 2, ~x = -3
		运算符的基本规则，返回一个新对象，不能修改self
	
	重载向量加法运算符+
		+运算符流程  a + b 
			查找a中有无__add__方法，如果有并且没有抛出NotImplemented则返回结果，否则调用b中的__radd__方法，如果b没有或者返回了NotImplemented则抛出TypeError，否则返回结果
			NotImplement和NotImplementedError不同，前者是特殊的单例值，如果中缀元算符特殊方法无法处理操作对象，则将其返回给解释器，而NotImpllementedError是异常，提示子类必须覆盖抽象基类中的占位方法
	中缀运算符方法和名称
		运算符	正向方法	方向方法	就地方法	说明
		+  		__add__ 	__radd__	__iadd__	加法或拼接
		-		__sub__		__rsub__	__isub__	减法
		*		__mul__		__rmul__	__imul__	乘法或重复复制
		/		__truediv__ __rtruediv__ __itruediv__	除法
		//	__floodrdiv__ __rfloodrdiv__ __ifloodrdiv__ 整除
		%		__mod__		__rmod__	__imod__	取模
		divmod() __divmod___ __rdivmod__ __idivmod___	返回由整除的商和模组数组成的元组 (商和余数)
		** pow() __pow__     __rpow__	 __ipow__	取幂*
		@		__matmul__	__rmatmul__	__imatmul__	矩阵乘法(点积，类似numpy.dot())
		&		__and__		__rand__	__iand__	位与
		|		__or__		__ror__		__ior__		位或
		^		__xor__		__rxor__	__ixor__	位异或
		<<		__lshift__	__rlshift__	__ilshift__	按位左移
		>>		__rshift__	__rrshift__	__irshift__	按位右移
		
	比较运算符
		== ！= > < >= <=
		__eq__调用机制同__add__，如果抛出了NotImplemented则尝试调用被操作对象的__eq__
		Python3中不需要重载__ne__方法，因为后备机制可以调用not __eq__()方法，可以满足需求
		
第 14 章 可迭代的对象、迭代器和生成器
	Sentence类 单词序列 V1
		默认情况下 reprlib.repr()最多有三十个字符,超过部分则用...代替
		RE_WORD = re.compile('\w+')
		RE_WORD.findall(text) 查找所有单词
			
		序列可以迭代的原因: iter函数
			内置iter函数作用
				1.检查对象是否实现了__iter__方法，如果实现了就调用它获取一个生成器
				2.如果没有实现__iter__，但是实现了__getitem__方法，Python会创建一个迭代器，尝试按顺序获取元素
				3.如果尝试失败，抛出TypeError
			
		在白鹅类型理论中，实现了__iter__函数，则可认为对象是可迭代的，此时不需要创建子类，不需要注册，isinstance(obj, abc.Iterable)和issubclass(cls, abc.Iterable)方法均可放回True,因为__subclasshook__方法
		调用iter()函数查看是否可迭代（与是否位迭代器不同）是最佳的选择
		
	可迭代对象与迭代器的对比
		可迭代对象和迭代器的关系
			Python从可迭代对象中获取迭代器，使用iter()函数可以主动获取迭代器
		
		标准迭代器接口的两个方法：
			1.__next__
				返回下一个可用对象，如果没有元素了，抛出StopIteration异常，在for循环等语句中会自动处理
			2.__iter__
				返回self，在for循环等可以使用可迭代对象的地方使用迭代器
			
		判断是否位迭代器使用ininstance(obj, abc.Iterator)
		
		迭代器定义
			实现了无参数的__next__方法，返回序列中的下一个元素；
			如果每有元素，抛出StopIteration异常。
			Python中的迭代器还实现了__iter__方法，因此迭代器也可以迭代
			
	Sentence类 V2 典型的迭代器
		实现一个迭代器类(SentenceIterator)
		在Sentence的__iter__方法中，返回一个迭代器，即SentenceIterator
		SentenceIterator中实现__next__方法和__iter__方法，它便是迭代器
		在设计模式中，迭代器模式应当能够选择多种迭代模式，所以Sentence类不可以覆盖__next__方法，如果覆盖了它便是迭代器而非迭代器对象，迭代器对象应当能够无限迭代，即调用__iter__获取 迭代器进行迭代
	
	Sentence类 V3 生成器
		iter()函数便是返回了一个生成器对象
		生成器函数的工作原理
			yield产出值，函数结束自动返回并抛出StopIteration异常，也可以自行return
	
	Sentence类 V4 惰性求值
		re.finditer()方法返回的是所有的re.Math object对象的生成器对象，可用于惰性求值节省内存空间
		生成器表达式
			(x for x in iterable)
		
		何时使用生成器表达式
			如果只有一个参数，生成器表达式可以不用再加上括号
			Vector([1, 2, 3])
			Vector(x for x in list([1, 2, 3]))
		

		
		
			
		

			
		
	